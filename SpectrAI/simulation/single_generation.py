import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# --- Private functions ---

from RickXia.data_augmentation import data_augmentation

def _INDV_dataframe_processing(
    molecule,
    coeff_name: str = ' epsilon (L/mol)',
    ):
    """_INDV_dataframe_processing function
    ------------------------------
    Function that processes the dataframe to extract the maximum extinction coefficient and the corresponding wavelength.

    Inputs:
    - molecule {pd.DataFrame}: The dataframe containing the absorbance spectra of the molecule
    - coeff_name {str}: (Opt.) The name of the column containing the extinction coefficient. Default: ' epsilon (L/mol)'

    Outputs:
    - mol_max_ext {float}: The maximum extinction coefficient
    - mol_wv_max {float}: The wavelength corresponding to the maximum extinction coefficient
    """

    # Get the row ID of the maximum extinction coefficient
    max_id = molecule[coeff_name].idxmax()
    # Get the wavelength and maximum extinction coefficient
    mol_wv_max, mol_max_ext = molecule.iloc[max_id].values
    # Populate the lists
    mol_max_ext
    mol_wv_max
    

    return mol_max_ext, mol_wv_max


# Graph the dataframe, taking wv_name and abs_name as the x and y axis using pyplot
def _INDV_graph(df, wv_name, abs_name):
    '''
    _INDV_graph function
    ---------------
    This function graphs the dataframe, taking wv_name and abs_name as the x and y axis using pyplot
    
    Inputs:
    - df{pd.DataFrame}: the dataframe to graph
    - wv_name{str}: the wavelength column name
    - abs_name{str}: the absorbance column name
    '''
    plt.plot(df[wv_name], df[abs_name])
    plt.xlabel(wv_name)
    plt.ylabel(abs_name)


def _INDV_create_absorbance(molecule,
                       concentration,
                       wv_name,
                       coeff_name,
                       abs_name,
                       noise : bool = True,
                       conc_error : bool = True):
    '''
    _INDV_create_absorbance function
    ---------------------------
    This function creates the absorbance spectra for a single molecule with a given concentration.
    
    Inputs:
    - molecule{pd.DataFrame}: the molecule absorbance spectra
    - concentration{float}: the concentration of the molecule
    - wv_name{str}: the wavelength column name
    - coeff_name{str}: the coefficient column name
    - abs_name{str}: the absorbance column name
    
    Outputs:
    - absorbance{pd.DataFrame}: the absorbance spectra for the molecule with the given concentration
    '''
   
    absorbance_values = molecule.loc[:, coeff_name] * concentration
    absorbance_values = _INDV_generate_sensor_noise(absorbance_values, min_err=0.005, max_err=0.01)
    absorbance = pd.DataFrame({
    wv_name : molecule[wv_name],
    abs_name : absorbance_values
    })
    return absorbance


def _INDV_generate_sensor_noise(
    absorbance: np.ndarray,
    min_err: float = 0.005, max_err: float = 0.02
    ):

  """_INDV_generate_sensor_noise function
-------------------------------
Function to emulate the noise generated by the sensor while reading
a sample. Based on experimental data

Input(s):
- absorbance {NumPy array}: Absorbance values to generate noise for.
- min_err {float}: (Opt.) Error at high light intensity.
                   Default (from experiments): 0.005 (0.5%)
- max_err {float}: (Opt.) Error at low light intensity.
                   Default (from experiments): 0.02 (2%)

Output(s):
- abs_noise {NumPy array}: Input absorbances, with noise added to it
"""

  # Define the conversion parameters
  # from experiments - do not change
  i0 = 45000 # Assume a constant light source over the wavelength
  min_intensity = 3000
  max_intensity = 45000

  # Calculate the intensity from the absorbance
  intensity = i0 / 10**(absorbance)

  # Rescale the intensity to an error factor
  normalized_intensity = (intensity - min_intensity)/(max_intensity - min_intensity)
  error_factor = normalized_intensity * (min_err - max_err) + max_err

  # Calculate the noise
  noise = np.random.normal(0, error_factor)

  # Convert back to absorbance
  int_noise = intensity * (1 + noise)
  abs_noise = np.log10( i0 / int_noise )

  return abs_noise


# --- Public functions ---

# This function generates the absorbance spectra for a single molecule with variations in the cocnentration
def generateINDVsamples(molecule,
                        molecule_name,
                        concentration: float,
                        n_concentrations,
                        n_samples,
                        c_error: float = 0.005, s_noise: tuple = (0.005, 0.02),
                        wv_name: str = 'wavelength (nm)', coeff_name: str = ' epsilon (L/mol)', abs_name: str = 'A (a.u.)',
                        verbose: bool = False
                        ):
    '''
    generateINDVsamples function
    ----------------------------
    This function generates the absorbance spectra for a single molecule with variations in the concentration
    Inputs:
    - molecule{pd.DataFrame}: the molecule absorbance spectra
    - molecule_name{str}: the molecule name
    - concentration{float}: the concentration list of the molecule
    - n_concentrations{int}: the number of concentrations to generate
    - n_samples{int}: the number of samples to generate IN TOTAL
    - c_error{float}: the concentration error,          default 0.005
    - s_noise{tuple}: the noise to add to the spectra,  default (0.005, 0.02)
    - wv_name{str}: the wavelength column name,         default 'wavelength (nm)'
    - coeff_name{str}: the coefficient column name,     default ' epsilon (L/mol)'
    - abs_name{str}: the absorbance column name.        default 'A (a.u.)'
    - verbose{bool}: the verbosity of the function,     default False   
    
    Outputs:
    - all_absorbances{list}: the list of all absorbance spectra
    '''

    # Generate the concentration list (already scaled)
    concentration_list = [concentration*(i/n_concentrations) for i in range(n_concentrations)]
    # Generate all absorbance spectra. This returns a list of pd.DataFrame
    
    # Generate all absorbance spectra given the concentration list
    all_absorbances = []
    for concentration in concentration_list:
        abs = _INDV_create_absorbance(molecule, concentration, wv_name, coeff_name, abs_name)
        all_absorbances.append(abs)
        _INDV_graph(abs, wv_name, abs_name)
    all_absorbances, all_concentrations = data_augmentation(all_absorbances, concentration_list, copies=30)
    
    if verbose:
        plt.show() 
    return all_absorbances, all_concentrations


